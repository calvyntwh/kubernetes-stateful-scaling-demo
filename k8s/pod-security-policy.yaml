apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-config-dev
  namespace: stateful-demo
  labels:
    app.kubernetes.io/name: stateful-guestbook
    app.kubernetes.io/component: security-config
    environment: development
data:
  policy.yaml: |
    # Pod Security Configuration based on Kubernetes Pod Security Standards
    
    volumes:
      allowed:
        - persistentVolumeClaim
        - emptyDir
        - configMap
        - secret
        - downwardAPI
        - projected
      disallowed:
        - hostPath
        - nfs
        - cifs
        - iscsi
        - fc
        - flocker
        - flexVolume
    
    capabilities:
      required_drop:
        - ALL
      allowed_add: []  # No capabilities allowed in restricted mode
    
    seccomp:
      allowed_profiles:
        - RuntimeDefault
        - Localhost
    
    selinux:
      allowed_types:
        - container_t
        - svirt_sandbox_file_t

---
# Staging Environment Security Configuration  
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-config-staging
  namespace: stateful-staging
  labels:
    app.kubernetes.io/name: stateful-guestbook
    app.kubernetes.io/component: security-config
    environment: staging
data:
  policy.yaml: |
    # Staging Pod Security Configuration
    # Matches production security requirements
    
    volumes:
      allowed:
        - persistentVolumeClaim
        - emptyDir
        - configMap
        - secret
        - downwardAPI
        - projected
      disallowed:
        - hostPath
        - nfs
        - cifs
    
    capabilities:
      required_drop:
        - ALL
      allowed_add: []
    
    seccomp:
      allowed_profiles:
        - RuntimeDefault
    
    selinux:
      allowed_types:
        - container_t

---
# Production Environment Security Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-config-prod
  namespace: stateful-production
  labels:
    app.kubernetes.io/name: stateful-guestbook
    app.kubernetes.io/component: security-config
    environment: production
data:
  policy.yaml: |
    # Production Pod Security Configuration
    # Maximum security controls with compliance requirements
    
    volumes:
      allowed:
        - persistentVolumeClaim
        - emptyDir
        - configMap
        - secret
        - downwardAPI
        - projected
      disallowed:
        - "*"  # Deny all other volume types
    
    capabilities:
      required_drop:
        - ALL
      allowed_add: []  # Zero capabilities in production
    
    seccomp:
      allowed_profiles:
        - RuntimeDefault  # Only runtime default in production
    
    selinux:
      allowed_types:
        - container_t
    
    # Production-specific controls
    compliance:
      standards:
        - CIS-1.6
        - NIST-800-190
        - SOC-2
      audit_logging: enabled
      violation_response: block

---
# Validation Configuration for All Environments
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-validation
  namespace: kube-system
  labels:
    app.kubernetes.io/name: pod-security-validation
    app.kubernetes.io/component: security-validation
data:
  validate.sh: |
    #!/bin/bash
    # Pod Security Standards Validation Script
    # Validates that all pods meet restricted security standards
    
    echo "üîí Validating Pod Security Standards compliance..."
    
    # Check all namespaces with Pod Security Standards
    for ns in stateful-demo stateful-staging stateful-production; do
      echo "Checking namespace: $ns"
      
      # Verify Pod Security Standards labels
      kubectl get namespace $ns -o jsonpath='{.metadata.labels}' | grep -q "pod-security.kubernetes.io/enforce.*restricted"
      if [ $? -eq 0 ]; then
        echo "‚úÖ $ns: Pod Security Standards enforced"
      else
        echo "‚ùå $ns: Pod Security Standards not properly configured"
      fi
      
      # Check pods for compliance
      kubectl get pods -n $ns -o jsonpath='{range .items[*]}{.metadata.name}: {.spec.securityContext.runAsNonRoot}{"\n"}{end}' | while read pod_info; do
        if [[ "$pod_info" == *"true" ]]; then
          echo "‚úÖ Pod compliant: $pod_info"
        else
          echo "‚ö†Ô∏è  Pod may need review: $pod_info"
        fi
      done
    done
    
    echo "üîí Pod Security Standards validation complete"

# üìã MIGRATION NOTES:
# This configuration replaces deprecated PodSecurityPolicy (PSP) 
# with modern Pod Security Standards (PSS) available in Kubernetes 1.23+
#
# Key improvements over PSP:
# ‚úì Namespace-level enforcement vs cluster-wide policies
# ‚úì Built-in security profiles (privileged, baseline, restricted)
# ‚úì No need for RBAC binding between users and policies
# ‚úì Simpler configuration and troubleshooting
# ‚úì Better performance (no admission controller overhead)
#
# To apply:
# kubectl apply -f pod-security-policy.yaml
# kubectl apply -f namespace.yaml
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  seLinux:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
